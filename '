/// Board containing pieces holding the state of the current game
///
/// Below are the coordinates for each of the locations on the game board
///
/// + --- + --- + --- + --- +
/// | 0,3 | 1,3 | 2,3 | 3,3 |
/// + --- + --- + --- + --- +
/// | 0,2 | 1,2 | 2,2 | 3,2 |
/// + --- + --- + --- + --- +
/// | 0,1 | 1,1 | 2,1 | 3,1 |
/// + --- + --- + --- + --- +
/// | 0,0 | 1,0 | 2,0 | 3,0 |
/// + --- + --- + --- + --- +
///
/// The formula to convert x,y into the index of the board itself is below:
///
/// row * 4 + column
struct Board {
    board: [Option<Piece>; 16],
}

impl Board {
    fn new() -> Board {
        Board { board: [None; 16] }
    }

    fn get_board_index(&self, x: u8, y: u8) -> u8 {
        x * 4 + y
    }

    fn get_piece(&self, x: u8, y: u8) -> Option<Piece> {
        let index = self.get_board_index(x, y) as usize;
        self.board[index]
    }

    fn place_piece(&mut self, x: u8, y: u8, resource: Resource) -> Result<(), TinyTownsError> {
        if x > 4 || y > 4 {
            return Err(TinyTownsError::OutOfBounds);
        }

        let index = self.get_board_index(x, y) as usize;

        if self.board[index].is_some() {
            return Err(TinyTownsError::Occupied);
        }

        self.board[index] = Some(Piece::Cube(resource));

        Ok(())
    }

    fn place_brick(&mut self, x: u8, y: u8) -> Result<(), TinyTownsError> {
        self.place_piece(x, y, Resource::Brick)
    }

    fn place_glass(&mut self, x: u8, y: u8) -> Result<(), TinyTownsError> {
        self.place_piece(x, y, Resource::Glass)
    }

    fn place_stone(&mut self, x: u8, y: u8) -> Result<(), TinyTownsError> {
        self.place_piece(x, y, Resource::Stone)
    }

    fn place_wheat(&mut self, x: u8, y: u8) -> Result<(), TinyTownsError> {
        self.place_piece(x, y, Resource::Wheat)
    }

    fn place_wood(&mut self, x: u8, y: u8) -> Result<(), TinyTownsError> {
        self.place_piece(x, y, Resource::Wood)
    }

    fn place_building(&mut self, x: u8, y: u8, building: Building) -> Result<(), TinyTownsError> {
        if x > 4 || y > 4 {
            return Err(TinyTownsError::OutOfBounds);
        }

        let index = self.get_board_index(x, y) as usize;

        if self.board[index].is_some() {
            return Err(TinyTownsError::Occupied);
        }

        self.board[index] = Some(Piece::Structure(building));

        Ok(())
    }

    fn check_building(&mut self, x: u8, y: u8, building: Building) -> Result<(), TinyTownsError> {
        if x > 4 || y > 4 {
            return Err(TinyTownsError::OutOfBounds);
        }

        let index = self.get_board_index(x, y) as usize;

        if self.board[index].is_some() {
            return Err(TinyTownsError::Occupied);
        }

        self.board[index] = Some(Piece::Structure(building));

        Ok(())
    }
}

#[derive(Clone, Copy, PartialEq, Eq)]
enum Piece {
    Cube(Resource),
    Structure(Building),
}

/// All resources available for a space to have
#[derive(Clone, Copy, PartialEq, Eq)]
enum Resource {
    Brick,
    Glass,
    Stone,
    Wheat,
    Wood,
}

/// All bulldings in the game
#[derive(Clone, Copy, PartialEq, Eq)]
enum Building {
    Theater,
}

///
impl Building {
    fn pattern(&self) -> Vec<Option<Resource>> {
        match self {
            Building::Well => vec![Some(Resource::Wood), Some(Resource::Stone)],
            Building::Theater => vec![None, Some(Resource::Stone), None, Some(Resource::Wood), Some(Resource::Glass), Some(Resource::Wood)],
        }
    }
}

/// Errors associated with Tiny Towns
#[derive(Clone, Copy, PartialEq, Eq)]
enum TinyTownsError {
    /// Attempting to place a resource in an occupied location
    Occupied,

    /// Given coordinates are out of bounds of the board
    OutOfBounds,
}

#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn board_init_board() {
        let mut board = Board::new();
        assert!(board.board == [None; 16]);
    }

    #[test]
    fn add_brick() {
        let mut board = Board::new();
        board.place_brick(0, 0);
        assert!(board.get_piece(0, 0) == Some(Piece::Cube(Resource::Brick)));
    }

    #[test]
    fn add_glass() {
        let mut board = Board::new();
        board.place_glass(0, 0);
        assert!(board.get_piece(0, 0) == Some(Piece::Cube(Resource::Glass)));
    }

    #[test]
    fn add_stone() {
        let mut board = Board::new();
        board.place_stone(0, 0);
        assert!(board.get_piece(0, 0) == Some(Piece::Cube(Resource::Stone)));
    }

    #[test]
    fn add_wheat() {
        let mut board = Board::new();
        board.place_wheat(0, 0);
        assert!(board.get_piece(0, 0) == Some(Piece::Cube(Resource::Wheat)));
    }

    #[test]
    fn add_wood() {
        let mut board = Board::new();
        board.place_wood(0, 0);
        assert!(board.get_piece(0, 0) == Some(Piece::Cube(Resource::Wood)));
    }

    #[test]
    fn error_occupied() {
        let mut board = Board::new();
        board.place_wood(0, 0);
        assert!(board.place_brick(0, 0) == Err(TinyTownsError::Occupied));
    }

    #[test]
    fn error_out_of_bounds_x() {
        let mut board = Board::new();
        assert!(board.place_wood(0, 100) == Err(TinyTownsError::OutOfBounds));
    }

    #[test]
    fn error_out_of_bounds_y() {
        let mut board = Board::new();
        assert!(board.place_wood(100, 0) == Err(TinyTownsError::OutOfBounds));
    }

    #[test]
    fn add_well() {
        let mut board = Board::new();
        board.place_building(0, 0, Building::Well);
        assert!(board.get_piece(0, 0) == Some(Piece::Structure(Building::Well)));
    }
}
